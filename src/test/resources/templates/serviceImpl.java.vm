package $!{package.ServiceImpl};

import $!{cfg.businessException};
import $!{cfg.orderByItem};
import $!{cfg.paging};
import $!{superServiceImplClassPackage};
import $!{cfg.addDtoPath};
import $!{cfg.updateDtoPath};
import $!{package.Entity}.$!{cfg.uniqueEntityName};
import $!{package.Mapper}.$!{table.mapperName};
import $!{cfg.queryPath};
import $!{package.Service}.$!{table.serviceName};
import $!{cfg.infoVoPath};
import $!{cfg.voPath};
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

/**
 * $!{cfg.appPrefix}$!{table.comment} 服务实现类
 *
 * @author $!{author}
 * @since $!{date}
 */
@Slf4j
@Service
public class $!{table.serviceImplName} extends $!{superServiceImplClass}<$!{table.mapperName}, $!{cfg.uniqueEntityName}> implements $!{table.serviceName} {

    @Autowired
    private $!{table.mapperName} $!{cfg.mapperObjectName};

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean add$!{entity}($!{cfg.addDtoName} $!{cfg.addDtoObjectName}) throws Exception {
        $!{cfg.uniqueEntityName} $!{cfg.uniqueEntityObjectName} = new $!{cfg.uniqueEntityName}();
        BeanUtils.copyProperties($!{cfg.addDtoObjectName}, $!{cfg.uniqueEntityObjectName});
        return save($!{cfg.uniqueEntityObjectName});
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean update$!{entity}($!{cfg.updateDtoName} $!{cfg.updateDtoObjectName}) throws Exception {
        Long $!{cfg.pkIdName} = $!{cfg.updateDtoObjectName}.get$!{cfg.pascalPkIdName}();
        $!{cfg.uniqueEntityName} $!{cfg.uniqueEntityObjectName} = getById($!{cfg.pkIdName});
        if ($!{cfg.uniqueEntityObjectName} == null) {
            throw new BusinessException("$!{cfg.appPrefix}$!{table.comment}不存在");
        }
        BeanUtils.copyProperties($!{cfg.updateDtoObjectName}, $!{cfg.uniqueEntityObjectName});
    #if($!{cfg.pascalUpdateTimeColumnName})
        $!{cfg.uniqueEntityObjectName}.set$!{cfg.pascalUpdateTimeColumnName}(new Date());
    #end
        return updateById($!{cfg.uniqueEntityObjectName});
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean delete$!{entity}(Long $!{cfg.pkIdName}) throws Exception {
        return removeById($!{cfg.pkIdName});
    }

    @Override
    public $!{cfg.infoVoName} get$!{entity}ById(Long $!{cfg.pkIdName}) throws Exception {
        return $!{cfg.mapperObjectName}.get$!{entity}ById($!{cfg.pkIdName});
    }

    @Override
    public Paging<$!{cfg.voName}> get$!{entity}Page($!{cfg.queryName} $!{cfg.queryObjectName}) throws Exception {
        #if($!{cfg.defaultOrderColumnName})
        handlePage($!{cfg.queryObjectName}, OrderByItem.desc("$!{cfg.defaultOrderColumnName}"));
        #else
        handlePage($!{cfg.queryObjectName});
        #end
        List<$!{cfg.voName}> list = $!{cfg.mapperObjectName}.get$!{entity}Page($!{cfg.queryObjectName});
        Paging<$!{cfg.voName}> paging = new Paging<>(list);
        return paging;
    }

}
